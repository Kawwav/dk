import streamlit as st
import pandas as pd
import numpy as np
# Certifique-se de que todas as fun√ß√µes pycaret necess√°rias est√£o importadas
from pycaret.classification import load_model, predict_model, setup, pull, compare_models, finalize_model, save_model
from sklearn.datasets import load_iris
from transformers import pipeline # J√° importado, √≥timo!

import matplotlib.pyplot as plt
import os

# --- Configura√ß√µes Iniciais ---
# Determine o diret√≥rio do script atual
script_dir = os.path.dirname(__file__)
# Construa o caminho completo para o arquivo do modelo padr√£o
default_model_path = os.path.join(script_dir, "model")

# Carrega o dataset Iris para refer√™ncia de features e target_names
iris = load_iris(as_frame=True)
default_iris_df = iris.frame
default_iris_df['target'] = iris.target # Adiciona a coluna target ao DataFrame do Iris
default_feature_names = iris.feature_names
default_target_name = 'target' # Nome padr√£o para a coluna target no dataframe Iris

# --- Inicializa st.session_state ---
# O Streamlit re-executa o script inteiro a cada intera√ß√£o.
# st.session_state √© a forma correta de persistir dados entre re-execu√ß√µes.

# Inicializa o modelo atual
if 'current_model' not in st.session_state:
    try:
        st.session_state['current_model'] = load_model(default_model_path)
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel carregar o modelo padr√£o 'model.pkl'. Por favor, fa√ßa upload de um CSV para treinar um novo modelo ou verifique o arquivo. Erro: {e}")
        st.session_state['current_model'] = None

# Inicializa o dataframe de compara√ß√£o atual
if 'comparison_df' not in st.session_state:
    try:
        comparison_path = os.path.join(script_dir, "model_comparison.csv")
        st.session_state['comparison_df'] = pd.read_csv(comparison_path)
    except FileNotFoundError:
        st.session_state['comparison_df'] = None

# Inicializa as features e o target_name do modelo atual
if 'current_model_features' not in st.session_state:
    st.session_state['current_model_features'] = default_feature_names
if 'current_model_target' not in st.session_state:
    st.session_state['current_model_target'] = default_target_name

# Inicializa o DataFrame customizado carregado (para sliders na p√°gina de previs√£o)
if 'uploaded_custom_df' not in st.session_state:
    st.session_state['uploaded_custom_df'] = None # Inicialmente None

# --- Layout do Streamlit ---
st.sidebar.title("üß™ Classificador de √çris/Dados Customizados")
# Adicione a nova op√ß√£o "An√°lise de Sentimento" ao radio button
page = st.sidebar.radio("Escolha uma p√°gina", ["üß¨ Prever", "üìä Comparar Modelos", "‚ûï Adicionar Novo Banco de Dados", "üí¨ An√°lise de Sentimento"])

# --- P√°gina: Adicionar Novo Banco de Dados ---
if page == "‚ûï Adicionar Novo Banco de Dados":
    st.title("‚ûï Treinar um Novo Modelo com Dados Customizados")
    st.write("Fa√ßa o upload de um arquivo CSV para treinar um novo modelo de classifica√ß√£o.")

    uploaded_file = st.file_uploader("Escolha um arquivo CSV", type="csv")

    if uploaded_file is not None:
        st.info("Arquivo carregado. Por favor, especifique a coluna alvo para classifica√ß√£o.")

        custom_df = pd.read_csv(uploaded_file)
        # Armazena o DataFrame customizado no session_state imediatamente ap√≥s o upload
        st.session_state['uploaded_custom_df'] = custom_df

        st.subheader("Pr√©via dos Dados Carregados:")
        st.dataframe(custom_df.head())

        available_columns = custom_df.columns.tolist()
        target_column = st.selectbox("Selecione a coluna alvo (target) para classifica√ß√£o:", available_columns)

        if st.button("Treinar Novo Modelo"):
            if target_column:
                with st.spinner("Treinando e comparando modelos... Isso pode levar alguns minutos."):
                    try:
                        # Configura o PyCaret com os dados customizados
                        exp_setup = setup(data=custom_df, target=target_column, session_id=456, verbose=False, html=False)

                        # Compara os modelos
                        best_custom_model = compare_models(sort='Accuracy')

                        # Salva a tabela de compara√ß√£o no disco
                        custom_comparison_df = pull()
                        custom_comparison_df.to_csv(os.path.join(script_dir, "custom_model_comparison.csv"), index=False)

                        # Finaliza e salva o melhor modelo no disco
                        final_custom_model = finalize_model(best_custom_model)
                        save_model(final_custom_model, os.path.join(script_dir, "custom_model")) # Salva como 'custom_model.pkl'

                        st.success("Novo modelo treinado e salvo com sucesso!")
                        st.write("Voc√™ pode agora ir para a p√°gina 'Prever' ou 'Comparar Modelos' para usar/ver o novo modelo.")

                        # Atualiza o estado da sess√£o com o novo modelo e dados
                        st.session_state['current_model'] = final_custom_model
                        st.session_state['comparison_df'] = custom_comparison_df
                        st.session_state['current_model_features'] = [col for col in custom_df.columns if col != target_column]
                        st.session_state['current_model_target'] = target_column

                    except Exception as e:
                        st.error(f"Ocorreu um erro durante o treinamento do modelo: {e}")
                        st.info("Verifique se os dados est√£o limpos e no formato correto para classifica√ß√£o.")
            else:
                st.warning("Por favor, selecione a coluna alvo antes de treinar o modelo.")

# --- P√°gina: Prever ---
elif page == "üß¨ Prever":
    st.title("üå∏ Previs√£o da Esp√©cie de √çris ou Dados Customizados")

    # Recupera o modelo, features e target do st.session_state
    current_model = st.session_state.get('current_model')
    current_feature_names = st.session_state.get('current_model_features')
    current_target_name = st.session_state.get('current_model_target')

    if current_model is None:
        st.warning("Nenhum modelo carregado ou treinado. Por favor, adicione um novo banco de dados para treinar um modelo.")
    else:
        st.subheader("Insira os valores para a previs√£o:")

        # Tenta obter o DataFrame customizado do session_state para os sliders.
        # Se n√£o houver, usa o DataFrame Iris padr√£o.
        data_for_sliders = st.session_state.get('uploaded_custom_df')
        if data_for_sliders is None:
            data_for_sliders = default_iris_df # Usa o DataFrame Iris padr√£o se nenhum customizado foi carregado

        input_values = {}
        for feature in current_feature_names:
            if feature in data_for_sliders.columns and \
               (data_for_sliders[feature].dtype == 'float64' or data_for_sliders[feature].dtype == 'int64'):
                min_val = float(data_for_sliders[feature].min())
                max_val = float(data_for_sliders[feature].max())
                default_val = float(data_for_sliders[feature].mean())
                input_values[feature] = st.slider(f"{feature}", min_val, max_val, default_val)
            else: # Se n√£o for num√©rico ou n√£o tiver um range conhecido
                input_values[feature] = st.text_input(f"{feature}", "")


        input_data = pd.DataFrame([input_values])
        # Garante que as colunas estejam na ordem esperada pelo modelo
        input_data = input_data[current_feature_names]

        if st.button("Prever"):
            prediction = predict_model(current_model, data=input_data)

            pred_label = prediction["prediction_label"][0]

            # A l√≥gica para exibir a label deve ser robusta para Iris e customizados
            # Se o target √© num√©rico e representa classes (como o Iris), √© melhor ter um mapeamento.
            # Para datasets customizados, assume que a label de previs√£o √© a classe diretamente.
            if current_target_name == default_target_name and isinstance(pred_label, (int, float)):
                # Se for o modelo Iris padr√£o e a previs√£o for um n√∫mero (0, 1, 2)
                st.success(f"Esp√©cie prevista: **{iris.target_names[int(pred_label)]}**")
            else:
                # Para modelos customizados ou quando a previs√£o j√° √© a string da classe
                st.success(f"Classe prevista: **{pred_label}**")

            if 'prediction_score' in prediction:
                st.write(f"Confian√ßa da previs√£o: {prediction['prediction_score'][0]:.2f}")


# --- P√°gina: Comparar Modelos ---
elif page == "üìä Comparar Modelos":
    st.title("üìä Compara√ß√£o de Modelos (Acur√°cia)")

    # Recupera o dataframe de compara√ß√£o do st.session_state
    current_comparison_df = st.session_state.get('comparison_df')

    if current_comparison_df is None or current_comparison_df.empty:
        st.warning("Nenhum dado de compara√ß√£o dispon√≠vel. Treine um modelo para ver a compara√ß√£o.")
    else:
        st.dataframe(current_comparison_df)
        st.bar_chart(current_comparison_df.set_index("Model")["Accuracy"])

# --- Nova P√°gina: An√°lise de Sentimento ---
elif page == "üí¨ An√°lise de Sentimento":
    st.title("üí¨ An√°lise de Sentimento com ü§ó Transformers")
    st.write("Insira um texto ou uma lista de textos para analisar o sentimento.")

    # Inicializa o pipeline de sentimento com o modelo ESPEC√çFICO
    @st.cache_resource # Usa st.cache_resource para armazenar o pipeline em cache
    def load_specific_sentiment_pipeline():
        st.info("Carregando modelo de An√°lise de Sentimento: `finiteautomata/bertweet-base-sentiment-analysis`... (Pode levar alguns segundos na primeira vez)")
        # Carrega o modelo espec√≠fico aqui
        return pipeline(model="finiteautomata/bertweet-base-sentiment-analysis")

    # Chama a fun√ß√£o para carregar o pipeline com o modelo espec√≠fico
    sentiment_pipeline = load_specific_sentiment_pipeline()

    text_input = st.text_area("Insira o texto (ou textos separados por nova linha):", height=150)

    if st.button("Analisar Sentimento"):
        if text_input:
            # Divide a entrada em uma lista de strings, uma por linha
            data_for_sentiment = [t.strip() for t in text_input.split('\n') if t.strip()]

            if data_for_sentiment:
                with st.spinner("Analisando sentimento..."):
                    # Executa o pipeline com os dados de entrada
                    results = sentiment_pipeline(data_for_sentiment)

                st.subheader("Resultados da An√°lise de Sentimento:")
                for i, res in enumerate(results):
                    st.write(f"**Texto:** `{data_for_sentiment[i]}`")
                    st.write(f"**Sentimento:** {res['label']} (Confian√ßa: {res['score']:.2f})")
                    st.write("---")
            else:
                st.warning("Por favor, insira algum texto para an√°lise.")
        else:
            st.warning("Por favor, insira algum texto para an√°lise.")